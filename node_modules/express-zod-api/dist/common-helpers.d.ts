import { Request } from "express";
import { z } from "zod";
import { CommonConfig, InputSources, LoggerConfig } from "./config-type";
import { Method } from "./method";
import { AnyMiddlewareDef } from "./middleware";
export declare type FlatObject = Record<string, any>;
declare type Refined<T extends z.ZodType> = T extends z.ZodType<infer O> ? z.ZodEffects<T, O, O> : never;
export declare type IOSchema<U extends UnknownKeysParam = any> = z.ZodObject<any, U> | z.ZodUnion<[IOSchema<U>, ...IOSchema<U>[]]> | z.ZodIntersection<IOSchema<U>, IOSchema<U>> | z.ZodDiscriminatedUnion<string, z.Primitive, z.ZodObject<any, U>> | Refined<z.ZodObject<any, U>>;
export declare type ArrayElement<T extends readonly unknown[]> = T extends readonly (infer K)[] ? K : never;
/** @see https://expressjs.com/en/guide/routing.html */
export declare const routePathParamsRegex: RegExp;
export declare type ProbableIntersection<A extends IOSchema<"strip"> | null, B extends IOSchema> = A extends null ? B : A extends IOSchema<"strip"> ? z.ZodIntersection<A, B> : never;
/**
 * @description intersects input schemas of middlewares and the endpoint
 * @since 07.03.2022 former combineEndpointAndMiddlewareInputSchemas()
 */
export declare const getFinalEndpointInputSchema: <MIN extends IOSchema<"strip"> | null, IN extends IOSchema<any>>(middlewares: AnyMiddlewareDef[], input: IN) => ProbableIntersection<MIN, IN>;
export declare const defaultInputSources: InputSources;
export declare const getActualMethod: (request: Request) => Method | "options";
export declare function getInitialInput(request: Request, inputAssignment: CommonConfig["inputSources"]): any;
export declare function isLoggerConfig(logger: any): logger is LoggerConfig;
export declare function isValidDate(date: Date): boolean;
export declare function makeErrorFromAnything<T extends Error>(subject: T): T;
export declare function makeErrorFromAnything(subject: any): Error;
export declare function getMessageFromError(error: Error): string;
export declare function getStatusCodeFromError(error: Error): number;
declare type Examples<T extends z.ZodTypeAny> = Readonly<z.input<T>[] | z.output<T>[]>;
export declare const getExamples: <T extends z.ZodTypeAny>(schema: T, parseToOutput: boolean) => Examples<T>;
export declare const combinations: <T extends unknown>(a: T[], b: T[]) => {
    type: "single";
    value: T[];
} | {
    type: "tuple";
    value: [T, T][];
};
export declare function getRoutePathParams(path: string): string[];
export declare function hasUpload(schema: z.ZodTypeAny): boolean;
export declare type ErrMessage = Exclude<Parameters<typeof z.ZodString.prototype.email>[0], undefined>;
export declare const errToObj: (message: ErrMessage | undefined) => {
    message?: string | undefined;
};
declare type UnknownKeysParam = "passthrough" | "strict" | "strip";
export {};
